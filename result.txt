# in app/processing/enrollment.py

# ... (inside the SpeakerEnrollment class) ...

    def get_all_enrolled_profiles_for_diarization(self) -> List[Dict]:
        # ... (this method stays the same) ...

    # --- ADD THE NEW METHOD HERE ---
    def get_all_speaker_profiles(self) -> List[Dict]:
        """
        Retrieves the metadata payloads for all enrolled speakers.
        Excludes the heavy vector data for efficiency.
        """
        try:
            # Scroll through all points, but only fetch the payload.
            all_points, _ = self.qdrant_client.scroll(
                collection_name=self.qdrant_collection_name,
                limit=10000, # A high limit to get all profiles
                with_payload=True,
                with_vectors=False # This is the key to efficiency
            )
            # Return just the payload for each point found
            profiles = [point.payload for point in all_points if point.payload]
            logger.info(f"Fetched metadata for {len(profiles)} speaker profiles.")
            return profiles
        except Exception as e:
            logger.error(f"Error fetching all speaker profiles from Qdrant: {e}", exc_info=True)
            return []
    # --- END OF NEW METHOD ---


    def search_profiles(self, query: str, limit: int = 10) -> List[Dict]:
        # ... (this method stays the same) ...
