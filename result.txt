# --- NEW, CORRECTED CODE ---
from app.db.base import engine # Make sure 'engine' is imported

@router.websocket("/ws/{request_id}")
async def websocket_endpoint(websocket: WebSocket, request_id: str):
    """
    Establishes a WebSocket connection for receiving real-time updates
    about a meeting job's status.
    """
    await websocket_manager.connect(websocket, request_id)
    
    # We manually create and manage the session lifecycle for the WebSocket.
    with Session(engine) as session:
        try:
            # Send the current status immediately upon connection
            job = session.exec(select(MeetingJob).where(MeetingJob.request_id == request_id)).first()
            if job:
                # Pass the manually created 'session' to the helper function
                initial_status = _format_job_status(job, session)
                await websocket.send_json(initial_status)
            
            # Keep the connection alive to receive broadcasted updates
            while True:
                await websocket.receive_text() # Keep connection open
        except WebSocketDisconnect:
            websocket_manager.disconnect(websocket, request_id)
            # The 'with' block ensures the session is closed automatically here.
