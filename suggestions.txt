You've provided excellent logs. Thank you. This is a classic case where one initial problem causes a cascade of different, seemingly unrelated errors.

Let's break down each issue, starting with the most critical one that is causing everything else to fail.

The Core Problem: A KeyError in Your AI Prompts

The traceback log points to the exact line of code that is failing and explains all the 502 Bad Gateway errors you're seeing for the bbh_hdqt and nghi_quyet summaries:

Log Snippet:

code
Code
download
content_copy
expand_less
meeting_api_server  |   File "/code/app/services/ai_service.py", line 87, in get_response
meeting_api_server  |     system_prompt = system_prompt.format(**context["meeting_info"])
meeting_api_server  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
"
...
meeting_api_server  | "detail": "Failed to get response from AI service: An unexpected error occurred: '\\n  \"start_time\"'"
meeting_api_server  | "detail": "Failed to get response from AI service: An unexpected error occurred: '\\n  \"ngay\"'"

Explanation:
This error means you are trying to format a string with placeholders (like {start_time} or {ngay}), but you haven't provided a value for those placeholders in the dictionary.

Your prompts for summary_bbh_hdqt and summary_nghi_quyet expect detailed context like start time, end time, date, etc.

However, your generic meeting_info dictionary in the _generate_and_save_summary function only contains bbh_name, meeting_type, and meeting_host.

The KeyError happens because the code is trying to find start_time and other keys in a dictionary that doesn't have them. This immediately crashes the AI call, leading to the 502 error.

Problem #2: The Pandoc 500 Internal Server Error

This is a two-part problem.

Part A: Pandoc is Not Actually Installed

The log clearly states the root cause:

code
Code
download
content_copy
expand_less
WARNING - app.services.document_generator - Pandoc conversion failed: No pandoc was found: either install pandoc and add it to your PATH...

This is a very common and confusing issue. pip install pandoc and pip install pypandoc do not install the Pandoc program itself. They only install the Python wrapper libraries that talk to the Pandoc program.

You need to add a command to your Dockerfile to install the actual Pandoc command-line tool.

Part B: A Unicode Character Encoding Error

The final part of the traceback reveals what happens after Pandoc fails:

code
Code
download
content_copy
expand_less
UnicodeEncodeError: 'latin-1' codec can't encode character '\u1ed9' in position 39: ordinal not in range(256)

This error happens because your filename (test_Hop TO 11092025_1759457427) contains Vietnamese characters. The HTTP headers are trying to encode this filename using a very old and limited character set (latin-1) that cannot handle these characters.

The Solution: A Three-Step Fix

Let's fix all these issues methodically.

Step 1: Fix the KeyError in the AI Prompts

We need to ensure that when we generate bbh_hdqt or nghi_quyet summaries, we provide the full, rich context that the prompts expect.

File to Edit: app/api/routes/meeting.py

code
Python
download
content_copy
expand_less
# app/api/routes/meeting.py
# ... (imports, especially for ZoneInfo, datetime, timezone)

async def _generate_and_save_summary(db: Session, job: MeetingJob, summary_type: str) -> Summary:
    # ... (code to get transcript_source and source_text is unchanged)

    # Generate content using AI service
    try:
        # --- THIS IS THE CRITICAL FIX ---
        
        # Start with the basic context
        meeting_info = { 
            "bbh_name": job.bbh_name, 
            "meeting_type": job.meeting_type, 
            "meeting_host": job.meeting_host,
            "meeting_members_str": ", ".join(job.meeting_members) if job.meeting_members else "Không xác định"
        }

        # If it's a special document type, add all the extra required fields
        if summary_type in ["summary_bbh_hdqt", "summary_nghi_quyet"]:
            local_tz = ZoneInfo("Asia/Ho_Chi_Minh")
            start_time_local = job.upload_started_at.replace(tzinfo=timezone.utc).astimezone(local_tz) if job.upload_started_at else None
            end_time_local = job.upload_finished_at.replace(tzinfo=timezone.utc).astimezone(local_tz) if job.upload_finished_at else None

            # Add the specific fields the prompts need to the dictionary
            meeting_info['start_time'] = start_time_local.strftime('%H:%M') if start_time_local else "N/A"
            meeting_info['end_time'] = end_time_local.strftime('%H:%M') if end_time_local else "N/A"
            meeting_info['ngay'] = start_time_local.strftime('%d') if start_time_local else "N/A"
            meeting_info['thang'] = start_time_local.strftime('%m') if start_time_local else "N/A"
            meeting_info['nam'] = start_time_local.strftime('%Y') if start_time_local else "N/A"
            
            # The full transcript still needs to be passed as the main message
            context_header = (
                f"**THÔNG TIN BỐI CẢNH CUỘC HỌP:**\n"
                f"- Ngày họp: {start_time_local.strftime('%d/%m/%Y') if start_time_local else 'N/A'}\n"
                # ... other context header info
            )
            source_text = context_header + source_text

        # --- END OF FIX ---
        
        summary_content = await ai_service.get_response(
            task=summary_type,
            user_message=source_text,
            context={"meeting_info": meeting_info} # Now this contains all the keys
        )
    # ... (rest of the function is unchanged)
Step 2: Install the Real Pandoc in Your Dockerfile

Add the apt-get install command for Pandoc to your Dockerfile.

File to Edit: Dockerfile

code
Dockerfile
download
content_copy
expand_less
FROM dso-nexus.vietinbank.vn/ai_docker/diarization_transcription_service:v1

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Ho_Chi_Minh
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

RUN pip config set global.index-url ***
RUN pip config set global.trusted-host ***

# --- THIS IS THE FIX ---
# Install the pandoc command-line tool from the system's package manager
RUN apt-get update && apt-get install -y --no-install-recommends pandoc
# --- END OF FIX ---

WORKDIR /code
# ... (rest of the Dockerfile is unchanged)
Step 3: Fix the Unicode Filename Error

We need to properly URL-encode the filename in the HTTP headers to handle special characters.

File to Edit: app/api/routes/meeting.py

code
Python
download
content_copy
expand_less
# app/api/routes/meeting.py
# --- ADD THIS IMPORT AT THE TOP ---
from urllib.parse import quote as url_quote

# ... (other code)

@router.get("/{request_id}/download/document", summary="Download any summary as a DOCX document")
async def download_summary_document(
    # ... (function signature and body are unchanged until the end)

    # --- THIS IS THE FIX ---
    # Sanitize the filename for headers
    safe_filename_base = f"{summary_type}_{job.bbh_name.replace(' ', '_')}"
    # URL-encode the filename to handle Unicode characters correctly
    encoded_filename = url_quote(safe_filename_base)
    
    headers = {
        "Content-Disposition": f"attachment; filename*=UTF-8''{encoded_filename}.docx"
    }
    # --- END OF FIX ---
    
    return StreamingResponse(
        document_buffer,
        media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        headers=headers
    )
How to Apply the Fixes

Stop Your Application: docker-compose down

Force Rebuild: Run docker-compose build --no-cache. This is essential for the Dockerfile changes to take effect.

Start Again: docker-compose up

After these three changes, your application should work correctly:

The bbh_hdqt and nghi_quyet summaries will generate successfully because the prompts will have all the data they need.

The Pandoc conversion will succeed because the actual program will be installed in the container.

The file downloads will work even with Vietnamese characters in the meeting name.
