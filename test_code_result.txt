root@240a62b35800:/test_client# python3 test_api.py
Loaded metadata for 7 speakers from CSV.
Found 2 meetings to process.

--- STEP 1: ENROLLING ALL SPEAKERS ---

Enrolling 'TAKEOS' (TV HDQT Takeo Shimotsu) with 1 samples...
  -> [Enroll Speaker] Status: 202
     Response: {
  "success": true,
  "message": "Enrollment for speaker 'takeos' has been accepted for processing."
}

Enrolling 'BINHTM' (CT HDQT Tran Minh Binh) with 20 samples...
  -> [Enroll Speaker] Status: 409
     Response: {
  "detail": "Speaker with user_ad 'binhtm' already exists."
}

Enrolling 'ANHNV19' (TV HDQT Nguyen Van Anh) with 1 samples...
  -> [Enroll Speaker] Status: 409
     Response: {
  "detail": "Speaker with user_ad 'anhnv19' already exists."
}

Enrolling 'IRIGUCHIK' (TV HDQT Koji Iriguchi) with 1 samples...
  -> [Enroll Speaker] Status: 409
     Response: {
  "detail": "Speaker with user_ad 'iriguchik' already exists."
}

Enrolling 'HUANNT' (TV HDQT Nguyen The Huan) with 1 samples...
  -> [Enroll Speaker] Status: 409
     Response: {
  "detail": "Speaker with user_ad 'huannt' already exists."
}

Enrolling 'DUONGCQ' (TV HDQT Cat Quang Duong) with 1 samples...
  -> [Enroll Speaker] Status: 409
     Response: {
  "detail": "Speaker with user_ad 'duongcq' already exists."
}

Enrolling 'DUC.TM' (CVP HDQT Tran Minh Duc) with 1 samples...
  -> [Enroll Speaker] Status: 409
     Response: {
  "detail": "Speaker with user_ad 'duc.tm' already exists."
}


--- STEP 2: TESTING ALL SPEAKER CRUD ENDPOINTS ---

Testing: GET /speaker/
  -> [List All Speakers] Status: 200
     Response: {
  "success": true,
  "message": "Successfully retrieved all speaker profiles.",
  "data": [
    {
      "display_name": "Takeosimashi",
      "user_ad": "huannt",
      "enrolled_at_utc": "2025-09-17T03:00:02.427725",
      "num_enrollment_samples": 1
    },
    {
      "display_name": "CVP HDQT Trần Minh Đức",
      "user_ad": "duc.tm",
      "enrolled_at_utc": "2025-09-16T10:31:02.082136",
      "num_enrollment_samples": 1
    },
    {
      "display_name": "TV HDQT Koji Iriguchi",
      "user_ad": "iriguchik",
      "enrolled_at_utc": "2025-09-16T10:30:56.125636",
      "num_enrollment_samples": 1
    },
    {
      "display_name": "CT HDQT Trần Minh Bình",
      "user_ad": "binhtm",
      "enrolled_at_utc": "2025-09-16T10:30:19.011222",
      "num_enrollment_samples": 10
    },
    {
      "display_name": "TV HDQT Cát Quang Dương",
      "user_ad": "duongcq",
      "enrolled_at_utc": "2025-09-17T03:26:36.926173",
      "num_enrollment_samples": 1
    },
    {
      "display_name": "TV HDQT Shimotsu Takeo",
      "user_ad": "takeos",
      "enrolled_at_utc": "2025-09-19T02:44:53.310727",
      "num_enrollment_samples": 1
    },
    {
      "display_name": "TV HDQT Nguyễn Vân Anh",
      "user_ad": "anhnv19",
      "enrolled_at_utc": "2025-09-16T10:30:53.613820",
      "num_enrollment_samples": 1
    }
  ]
}

Testing: GET /speaker/huannt
  -> [Get Speaker Details] Status: 200
     Response: {
  "success": true,
  "message": "Profile retrieved successfully",
  "user_ad": "huannt",
  "profile_details": {
    "qdrant_point_id": "2c5e08b3-a028-4682-849a-4f871717f61b",
    "payload": {
      "display_name": "Takeosimashi",
      "user_ad": "huannt",
      "enrolled_at_utc": "2025-09-17T03:00:02.427725",
      "num_enrollment_samples": 1,
      "search_terms": [
        "ta",
        "t",
        "tak",
        "takeosima",
        "hu",
        "takeosimas",
        "takeosimashi",
        "huan",
        "takeosim",
        "takeos",
        "takeo",
        "huann",
        "huannt",
        "takeosimash",
        "take",
        "takeosi",
        "h",
        "hua"
      ]
    },
    "has_vector": true
  }
}

Testing: PUT /speaker/huannt/metadata
  -> [Update Metadata] Status: 202
     Response: {
  "success": true,
  "message": "Metadata update request has been accepted for processing."
}
  -> [Get Speaker Upodated Details] Status: 200
     Response: {
  "success": true,
  "message": "Profile retrieved successfully",
  "user_ad": "huannt",
  "profile_details": {
    "qdrant_point_id": "2c5e08b3-a028-4682-849a-4f871717f61b",
    "payload": {
      "display_name": "Takeosimashi",
      "user_ad": "huannt",
      "enrolled_at_utc": "2025-09-17T03:00:02.427725",
      "num_enrollment_samples": 1,
      "search_terms": [
        "ta",
        "t",
        "tak",
        "takeosima",
        "hu",
        "takeosimas",
        "takeosimashi",
        "huan",
        "takeosim",
        "takeos",
        "takeo",
        "huann",
        "huannt",
        "takeosimash",
        "take",
        "takeosi",
        "h",
        "hua"
      ]
    },
    "has_vector": true
  }
}

Testing: POST /speaker/huannt/samples
  -> Skipping Add Sample test: Not enough audio files.

Testing: DELETE /speaker/takeos
  -> [Delete Speaker] Status: 200
     Response: {
  "success": true,
  "message": "Profile for 'takeos' was successfully deleted."
}


--- STEP 3: PROCESSING A FULL MEETING ---

Testing: POST /meeting/start-bbh for requestId 'test_Hop TO 11092025_1758249897'...
  -> [Start Meeting] Status: 201
     Response: {
  "status": 201,
  "message": "Meeting initialized. Ready for chunk uploads."
}

Testing: POST /meeting/upload-file-chunk...
  -> [Upload Chunks] All chunks sent.

--- STEP 4: WAITING FOR TRANSCRIPTION VIA WEBSOCKET ---

[WebSocket] Connecting to ws://api:8072/api/v1/meeting/ws/test_Hop%20TO%2011092025_1758249897...
[WebSocket] Connection opened.

[WebSocket] === STATUS UPDATE: assembling ===
{
  "request_id": "test_Hop TO 11092025_1758249897",
  "status": "assembling",
  "bbh_name": "Test BBH Name",
  "meeting_type": "Test Type",
  "meeting_host": "Test Host",
  "language": "vi",
  "plain_transcript": null,
  "diarized_transcript": null,
  "error_message": null
}

[WebSocket] === STATUS UPDATE: transcribing ===
{
  "status": "transcribing"
}

