# /app/utils.py

import logging
import re
from io import BytesIO

from docxtpl import DocxTemplate, Subdoc
from docx.enum.text import WD_ALIGN_PARAGRAPH

logger = logging.getLogger(__name__)


def markdown_to_subdoc(template: DocxTemplate, md_text: str) -> Subdoc:
    """
    Converts a Markdown string into a docxtpl Subdoc object with precise control
    over formatting and alignment.

    Supports:
    - Paragraphs (justified)
    - Bullet points (using 'List Bullet' style, justified)
    - Bold text (`**text**`) within any line.
    """
    # Create a new subdocument from the main template
    subdoc = template.new_subdoc()
    
    # Sanitize and split the text into lines
    clean_text = md_text.strip()
    
    for line in clean_text.split('\n'):
        stripped_line = line.strip()
        if not stripped_line:
            continue # Skip empty lines

        # Determine the paragraph type and set its base properties
        if stripped_line.startswith(('* ', '- ')):
            # This is a bullet point
            p = subdoc.add_paragraph(style='List Bullet')
            p.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            content = stripped_line[2:] # Get text after '* ' or '- '
        else:
            # This is a standard paragraph or a heading-like line
            p = subdoc.add_paragraph()
            # We assume lines that are also bolded are headings and should be left-aligned
            if stripped_line.startswith('**') and stripped_line.endswith('**'):
                 p.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.LEFT
            else:
                 p.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
            content = stripped_line
        
        # --- Process Inline Formatting (Bold Text) ---
        # Split the line by the bold markers `**` to handle mixed formatting
        parts = re.split(r'(\*\*.*?\*\*)', content)
        
        for part in parts:
            if not part:
                continue
            
            # If the part is bold, strip the markers and add it as a bold run
            if part.startswith('**') and part.endswith('**'):
                run = p.add_run(part[2:-2])
                run.bold = True
            # Otherwise, add it as a regular, non-bold run
            else:
                run = p.add_run(part)

    return subdoc
